# bot/rag/search.py
import logging
from typing import List, Dict

from bot.rag.faq_loader import load_faq
from bot.rag.vector_store import search_similar_questions, add_faq_entries, init_vector_store
from bot.api.ollama import ask_ollama

logger = logging.getLogger(__name__)

# –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
RAG_INITIALIZED = False

async def init_rag():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç RAG: –∑–∞–≥—Ä—É–∂–∞–µ—Ç FAQ, —Å–æ–∑–¥–∞—ë—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î."""
    global RAG_INITIALIZED
    if RAG_INITIALIZED:
        return

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Chroma –∏ –º–æ–¥–µ–ª–∏
        await init_vector_store()

        # –ó–∞–≥—Ä—É–∑–∫–∞ FAQ
        faq_data = load_faq()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        add_faq_entries(faq_data)

        RAG_INITIALIZED = True
        logger.info("‚úÖ RAG –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG: {e}", exc_info=True)
        raise

async def find_relevant_faq_entries(query: str, top_k: int = 3) -> List[Dict[str, str]]:
    """–ò—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø–∏—Å–∏ –≤ FAQ —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫."""
    try:
        await init_rag()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ RAG –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        return search_similar_questions(query, top_k)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ FAQ —á–µ—Ä–µ–∑ RAG: {e}", exc_info=True)
        return []

async def rag_ask_ollama(user_question: str, context: str = "") -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ Ollama —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ FAQ.
    """
    try:
        # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ FAQ
        faq_results = await find_relevant_faq_entries(user_question, top_k=3)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        faq_context = ""
        if faq_results:
            faq_lines = ["üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:"]
            for item in faq_results:
                faq_lines.append(f"–í–æ–ø—Ä–æ—Å: {item['question']}\n–û—Ç–≤–µ—Ç: {item['answer']}\n")
            faq_context = "\n".join(faq_lines)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        full_context = f"{context}\n\n{faq_context}".strip()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Ollama
        return await ask_ollama(user_question, full_context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ rag_ask_ollama: {e}", exc_info=True)
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò."