# bot/handlers/bookings.py
import logging
from datetime import date, timedelta
from aiogram import Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bot.config import SPA_ROOM_ID, CLEANING_ZONES, ARRIVAL_CATEGORIES
from bot.api.litepms import search_checkins, format_guest_name, is_active_status, fetch_rooms, get_room_name, fetch_categories, fetch_rooms_by_categories
# –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
from bot.utils.permissions import can_access_command

router = Router()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –Ω–æ–º–µ—Ä–æ–≤
ROOMS_CACHE = {}

async def load_rooms_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    global ROOMS_CACHE
    ROOMS_CACHE = await fetch_rooms()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ROOMS_CACHE)} –Ω–æ–º–µ—Ä–æ–≤ –≤ –∫—ç—à")

# --- /arrival2 ---
@router.message(Command("arrival2"))
async def cmd_arrival2(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π, –∑–∞–µ–∑–∂–∞—é—â–∏—Ö —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if not can_access_command(message.from_user.id, "/arrival2"):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã1.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /arrival2 –±–µ–∑ –ø—Ä–∞–≤.")
        return

    today = date.today()
    tomorrow = today + timedelta(days=1)
    bookings = await search_checkins(today.isoformat(), tomorrow.isoformat())

    grouped = {today.isoformat(): [], tomorrow.isoformat(): []}
    for b in bookings:
        if is_active_status(b["status_id"]):
            d = b["date_in"][:10]
            if d in grouped:
                grouped[d].append(b)

    parts = []
    for d in [today, tomorrow]:
        label = "–°–µ–≥–æ–¥–Ω—è" if d == today else "–ó–∞–≤—Ç—Ä–∞"
        entries = grouped[d.isoformat()]
        if entries:
            lines = []
            for b in entries:
                guest = format_guest_name(b)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
                from bot.cache import get_room_name
                room_name = ROOMS_CACHE.get(str(b['room_id']), f"ID {b['room_id']}")
                total_guests = int(b.get('person', 1)) + int(b.get('person_add', 0))
                lines.append(f"‚Ä¢ {room_name} ‚Äî {guest} ({total_guests} –≥–æ—Å—Ç—è)")
            parts.append(f"üìÖ {label}, {d.strftime('%d.%m')}:\n" + "\n".join(lines))
        else:
            parts.append(f"üìÖ {label}, {d.strftime('%d.%m')}:\n‚Ä¢ –ù–µ—Ç –∑–∞–µ–∑–¥–æ–≤")

    await message.answer("\n\n".join(parts))


# --- /arrival ---
@router.message(Command("arrival"))
async def cmd_arrival(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π, –∑–∞–µ–∑–∂–∞—é—â–∏—Ö —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞, —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if not can_access_command(message.from_user.id, "/arrival"):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã1.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /arrival –±–µ–∑ –ø—Ä–∞–≤.")
        return

    if not ARRIVAL_CATEGORIES:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è /arrival –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logger.warning("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è /arrival (ARRIVAL_CATEGORIES) –ø—É—Å—Ç.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    target_rooms = await fetch_rooms_by_categories(ARRIVAL_CATEGORIES)
    if not target_rooms:
        await message.answer(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {', '.join(ARRIVAL_CATEGORIES)}")
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {ARRIVAL_CATEGORIES}")
        return

    today = date.today()
    tomorrow = today + timedelta(days=1)
    bookings = await search_checkins(today.isoformat(), tomorrow.isoformat())

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–µ–∑–¥—ã –≤ —Ü–µ–ª–µ–≤—ã—Ö –Ω–æ–º–µ—Ä–∞—Ö
    filtered_bookings = []
    for b in bookings:
        if is_active_status(b["status_id"]) and str(b["room_id"]) in target_rooms:
            filtered_bookings.append(b)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–æ–º–µ—Ä–∞
    filtered_bookings.sort(key=lambda x: target_rooms.get(str(x["room_id"]), ""))

    grouped: dict[str, list] = {today.isoformat(): [], tomorrow.isoformat(): []}
    for b in filtered_bookings:
        d = b["date_in"][:10]
        if d in grouped:
            grouped[d].append(b)

    parts = []
    for d in [today, tomorrow]:
        label = "–°–µ–≥–æ–¥–Ω—è" if d == today else "–ó–∞–≤—Ç—Ä–∞"
        entries = grouped[d.isoformat()]
        if entries:
            lines = []
            for b in entries:
                guest = format_guest_name(b)
                room_name = target_rooms.get(str(b['room_id']), f"ID {b['room_id']}")
                total_guests = int(b.get('person', 1)) + int(b.get('person_add', 0))
                lines.append(f"‚Ä¢ {room_name} ‚Äî {guest} ({total_guests} –≥–æ—Å—Ç—è)")
            parts.append(f"üìÖ {label}, {d.strftime('%d.%m')}:\n" + "\n".join(lines))
        else:
            parts.append(f"üìÖ {label}, {d.strftime('%d.%m')}:\n‚Ä¢ –ù–µ—Ç –∑–∞–µ–∑–¥–æ–≤")

    await message.answer("\n\n".join(parts))

# --- /room ---
@router.message(Command("room"))
async def cmd_room(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–µ–∑–¥—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if not can_access_command(message.from_user.id, "/room"):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /room –±–µ–∑ –ø—Ä–∞–≤.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ü—Ä–∏–º–µ—Ä: `/room –î–æ–º 12`", parse_mode="Markdown")
        return

    room_query = args[1].strip().lower()
    
    # –ò—â–µ–º room_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    target_room_id = None
    for rid, rname in ROOMS_CACHE.items():
        if isinstance(rname, str) and rname.lower() == room_query:
            target_room_id = rid
            break
        elif isinstance(rname, list):
            for name in rname:
                if name.lower() == room_query:
                    target_room_id = rid
                    break
            if target_room_id:
                break

    if not target_room_id:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        matches = []
        for rid, rnames in ROOMS_CACHE.items():
            if isinstance(rnames, list):
                rname = ", ".join(rnames).strip()
            else:
                rname = str(rnames).strip()
            if room_query in rname.lower():
                matches.append(rname)
        if matches:
            await message.answer(
                f"–ù–æ–º–µ—Ä ¬´{room_query}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n" + "\n".join(f"‚Ä¢ {m}" for m in matches)
            )
        else:
            await message.answer(f"–ù–æ–º–µ—Ä ¬´{room_query}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    today = date.today()
    tomorrow = today + timedelta(days=1)
    bookings = await search_checkins(today.isoformat(), tomorrow.isoformat())

    matched = []
    for b in bookings:
        if b["room_id"] == target_room_id and is_active_status(b["status_id"]):
            checkin_date = b["date_in"][:10]
            guest = format_guest_name(b)
            total_guests = int(b.get("person", 1)) + int(b.get("person_add", 0))
            matched.append((checkin_date, guest, total_guests))

    if not matched:
        room_name = ROOMS_CACHE.get(target_room_id, f"ID {target_room_id}")
        await message.answer(f"–ù–µ—Ç –∑–∞–µ–∑–¥–æ–≤ –≤ ¬´{room_name}¬ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞.")
    else:
        lines = []
        for checkin_date, guest, guests in matched:
            d_label = "–°–µ–≥–æ–¥–Ω—è" if checkin_date == today.isoformat() else "–ó–∞–≤—Ç—Ä–∞"
            lines.append(f"‚Ä¢ {d_label} ‚Äî {guest} ({guests} –≥–æ—Å—Ç—è)")
        room_name = ROOMS_CACHE.get(target_room_id, f"ID {target_room_id}")
        await message.answer(f"üè® {room_name}:\n" + "\n".join(lines))


# --- /spa ---
@router.message(Command("spa"))
async def cmd_spa(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—Ä–æ–Ω–∏ –°–ü–ê –Ω–∞ 2 –¥–Ω—è."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if not can_access_command(message.from_user.id, "/spa"):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /spa –±–µ–∑ –ø—Ä–∞–≤.")
        return

    SPA_ID = SPA_ROOM_ID
    today = date.today()
    tomorrow = today + timedelta(days=1)
    bookings = await search_checkins(today.isoformat(), tomorrow.isoformat())

    spa_bookings = []
    for b in bookings:
        if b.get("room_id") == SPA_ID and is_active_status(b["status_id"]):
            checkin_date = b["date_in"][:10]
            checkin_time = b["date_in"][11:16]
            checkout_time = b["date_out"][11:16]
            guest = format_guest_name(b)
            total_guests = int(b.get("person", 1)) + int(b.get("person_add", 0))
            spa_bookings.append({
                "date": checkin_date,
                "time_in": checkin_time,
                "time_out": checkout_time,
                "guest": guest,
                "guests": total_guests
            })
            
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞   
    spa_bookings.sort(key=lambda x: x["time_in"])
    
    if not spa_bookings:
        await message.answer("–ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ –°–ü–ê –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞.")
        return

    parts = []
    for d in [today, tomorrow]:
        d_str = d.isoformat()
        label = "–°–µ–≥–æ–¥–Ω—è" if d == today else "–ó–∞–≤—Ç—Ä–∞"
        day_label = f"üíÜ‚Äç‚ôÄÔ∏è {label}, {d.strftime('%d.%m')}:"
        entries = [b for b in spa_bookings if b["date"] == d_str]
        if entries:
            lines = []
            for b in entries:
                lines.append(
                    f"‚Ä¢ {b['guest']} ({b['guests']} –≥–æ—Å—Ç—è)\n"
                    f"  üïí {b['time_in']} ‚Äì {b['time_out']}"
                )
            parts.append(f"{day_label}\n" + "\n".join(lines))
        else:
            parts.append(f"{day_label}\n‚Ä¢ –ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")

    await message.answer("\n\n".join(parts))