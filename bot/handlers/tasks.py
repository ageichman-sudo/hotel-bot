# bot/handlers/tasks.py
from aiogram import Router, types
from aiogram.filters import Command

from bot.utils.db import create_task, get_active_tasks, complete_task, get_task_room_id
from bot.api.litepms import set_cleaning_status

router = Router()

@router.message(Command("task"))
async def cmd_task(message: types.Message):
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."""

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ü—Ä–∏–º–µ—Ä: `/task –£–±–æ—Ä–∫–∞ –°–ü–ê`")
        return

    desc = args[1].strip()
    task_id = create_task(desc, str(message.from_user.id))
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —Å–æ–∑–¥–∞–Ω–∞.\n–ó–∞–≤–µ—Ä—à–∏—Ç—å: `/done {task_id}`")
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: await –≤–Ω—É—Ç—Ä–∏ async def ---
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    from .base import cmd_admin_menu
    await cmd_admin_menu(message)
    # ------------------------------------------


@router.message(Command("done"))
async def cmd_done(message: types.Message):
    """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é."""
   
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ü—Ä–∏–º–µ—Ä: `/done 5`")
        return

    try:
        task_id = int(args[1])
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    room_id = get_task_room_id(task_id)
    if not room_id:
        await message.answer(f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é –∏ –≤—ã—Ö–æ–¥–∏–º
        from .base import cmd_admin_menu
        await cmd_admin_menu(message)
        return

    updated = complete_task(task_id)

    if room_id and room_id.isdigit():
        try:
            await set_cleaning_status(room_id, "0")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —É–±–æ—Ä–∫–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω: {e}")

    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: await –≤–Ω—É—Ç—Ä–∏ async def ---
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    from .base import cmd_admin_menu
    await cmd_admin_menu(message)
    # ------------------------------------------


@router.message(Command("tasks"))
async def cmd_tasks(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."""
    
    rows = get_active_tasks()
    if not rows:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é –∏ –≤—ã—Ö–æ–¥–∏–º
        from .base import cmd_admin_menu
        await cmd_admin_menu(message)
        return

    lines = ["üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"]
    for tid, desc, rname in rows:
        lines.append(f"‚Ä¢ #{tid}: {desc}")
        if rname:
            lines.append(f"  üè® {rname}")
        lines.append("")

    await message.answer("\n".join(lines))
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: await –≤–Ω—É—Ç—Ä–∏ async def ---
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    from .base import cmd_admin_menu
    await cmd_admin_menu(message)
    # ------------------------------------------
