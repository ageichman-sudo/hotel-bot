# bot/handlers/cleaning_report.py
import logging
from datetime import datetime
from typing import List, Dict, Any, Union

from aiogram import Router, F
from aiogram.types import Message, ContentType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫—ç—à–∞, API
from bot.config import CLEANING_REPORTS_CHANNEL_ID, CLEANING_ZONES
from bot.api.litepms import set_cleaning_status

router = Router()
logger = logging.getLogger(__name__)

# FSM States
class CleaningReportState(StatesGroup):
    waiting_for_zone_selection = State()
    waiting_for_files = State()
    waiting_for_comment = State()

REPORT_DATA_KEY = "cleaning_report_data"

def get_zone_display_name(zone_name: str, room_id_in_litepms: Union[str, None]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∑–æ–Ω—ã."""
    if room_id_in_litepms:
        return f"{zone_name}"
    return zone_name

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∫–Ω–æ–ø–∫—É "üßº –û—Ç—á–µ—Ç –ø–æ —É–±–æ—Ä–∫–µ"
@router.message(F.text == "üßº –û—Ç—á–µ—Ç –ø–æ —É–±–æ—Ä–∫–µ")
@router.message(Command("cleaning_report"))
async def start_cleaning_report(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± —É–±–æ—Ä–∫–µ."""
    user_id = message.from_user.id   

    if not CLEANING_ZONES:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∑–æ–Ω —É–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logger.warning("–°–ø–∏—Å–æ–∫ –∑–æ–Ω —É–±–æ—Ä–∫–∏ (CLEANING_ZONES) –ø—É—Å—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–æ–Ω–∞–º–∏
    kb = ReplyKeyboardBuilder()
    for zone_name, room_id_in_litepms in CLEANING_ZONES:
        display_name = get_zone_display_name(zone_name, room_id_in_litepms)
        kb.button(text=display_name)
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    kb.adjust(2)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É, –∫–æ—Ç–æ—Ä—É—é —É–±—Ä–∞–ª–∏:", reply_markup=kb.as_markup(resize_keyboard=True))
    await state.set_state(CleaningReportState.waiting_for_zone_selection)

# –•–µ–Ω–¥–ª–µ—Ä: –ö–Ω–æ–ø–∫–∞ "‚ùå –û—Ç–º–µ–Ω–∞" –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –∑–æ–Ω—ã
@router.message(StateFilter(CleaningReportState.waiting_for_zone_selection), F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_zone_selection(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –∑–æ–Ω—ã –∏ –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç—á–µ—Ç–∞."""
    await state.clear()
    await message.answer("‚Ü©Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ —É–±–æ—Ä–∫–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –•–µ–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ –∑–æ–Ω—ã
@router.message(StateFilter(CleaningReportState.waiting_for_zone_selection))
async def process_zone_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–æ–Ω—ã —É–±–æ—Ä–∫–∏."""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await start_cleaning_report(message, state)
        return

    selected_zone_text = message.text.strip()
    
    # –ù–∞–π—Ç–∏ –∑–æ–Ω—É –ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏
    selected_zone = None
    for zone_name, room_id_in_litepms in CLEANING_ZONES:
        display_name = get_zone_display_name(zone_name, room_id_in_litepms)
        if display_name == selected_zone_text:
            selected_zone = (zone_name, room_id_in_litepms)
            break
            
    if not selected_zone:
        # –ü—Ä–æ–±—É–µ–º –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏
        for zone_name, room_id_in_litepms in CLEANING_ZONES:
            if zone_name == selected_zone_text:
                selected_zone = (zone_name, room_id_in_litepms)
                break

    if not selected_zone:
        await message.answer("‚ùå –í—ã–±—Ä–∞–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    zone_name, room_id_in_litepms = selected_zone
    await state.update_data({
        REPORT_DATA_KEY: {
            "zone_name": zone_name,
            "room_id_in_litepms": room_id_in_litepms,
            "files": [],
            "comment": "",
            "timestamp": datetime.now().isoformat()
        }
    })

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ì–æ—Ç–æ–≤–æ" –∏ "–ù–∞–∑–∞–¥"
    kb = ReplyKeyboardBuilder()
    kb.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    kb.adjust(2)

    await message.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç—á–µ—Ç–∞ –æ–± —É–±–æ—Ä–∫–µ.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ì–æ—Ç–æ–≤–æ'.\n"
        "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∑–æ–Ω—É ‚Äî –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'.",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(CleaningReportState.waiting_for_files)

# –•–µ–Ω–¥–ª–µ—Ä: –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –Ω–∞ —ç—Ç–∞–ø–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
@router.message(StateFilter(CleaningReportState.waiting_for_files), F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back_from_files(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –∑–æ–Ω—ã."""
    await state.clear()
    await start_cleaning_report(message, state)

# –•–µ–Ω–¥–ª–µ—Ä —Å–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
@router.message(StateFilter(CleaningReportState.waiting_for_files), ~F.text.startswith("‚úÖ"))
async def collect_files(message: Message, state: FSMContext):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∞–π–ª—ã, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–º–µ—Ç '‚úÖ –ì–æ—Ç–æ–≤–æ'."""
    user_data = await state.get_data()
    report_data = user_data.get(REPORT_DATA_KEY, {})
    
    if 'files' not in report_data:
        report_data['files'] = []

    file_id = None
    file_type = None
    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = 'photo'
    elif message.video:
        file_id = message.video.file_id
        file_type = 'video'
    elif message.document:
        file_id = message.document.file_id
        file_type = 'document'

    if file_id and file_type:
        report_data['files'].append({
            'file_id': file_id,
            'file_type': file_type
        })
        await state.update_data({REPORT_DATA_KEY: report_data})
        logger.info(f"–§–∞–π–ª {file_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—á–µ—Ç.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")

# –•–µ–Ω–¥–ª–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
@router.message(StateFilter(CleaningReportState.waiting_for_files), F.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")
async def finish_collecting_files(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é."""
    user_data = await state.get_data()
    report_data = user_data.get(REPORT_DATA_KEY, {})
    
    if not report_data.get('files'):
        await message.answer("–í—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏ "–ù–∞–∑–∞–¥"
    kb = ReplyKeyboardBuilder()
    kb.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    kb.adjust(2)

    await message.answer(
        "–§–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã.\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–∂–º–∏—Ç–µ '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.\n"
        "–ß—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'.",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(CleaningReportState.waiting_for_comment)

# –•–µ–Ω–¥–ª–µ—Ä: –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –Ω–∞ —ç—Ç–∞–ø–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@router.message(StateFilter(CleaningReportState.waiting_for_comment), F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back_from_comment(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —ç—Ç–∞–ø—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤."""
    user_data = await state.get_data()
    report_data = user_data.get(REPORT_DATA_KEY, {})
    if 'comment' in report_data:
        del report_data['comment']
    await state.update_data({REPORT_DATA_KEY: report_data})

    kb = ReplyKeyboardBuilder()
    kb.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    kb.adjust(2)

    await message.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç—á–µ—Ç–∞ –æ–± —É–±–æ—Ä–∫–µ.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ì–æ—Ç–æ–≤–æ'.\n"
        "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∑–æ–Ω—É ‚Äî –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'.",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(CleaningReportState.waiting_for_files)

# –•–µ–Ω–¥–ª–µ—Ä: –ö–Ω–æ–ø–∫–∞ "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –Ω–∞ —ç—Ç–∞–ø–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@router.message(StateFilter(CleaningReportState.waiting_for_comment), F.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_comment(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—á–µ—Ç."""
    user_data = await state.get_data()
    report_data = user_data.get(REPORT_DATA_KEY, {})
    await state.update_data({REPORT_DATA_KEY: report_data})
    await process_final_step(message, state)

# –•–µ–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
@router.message(StateFilter(CleaningReportState.waiting_for_comment))
async def process_comment_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å."""
    user_data = await state.get_data()
    report_data = user_data.get(REPORT_DATA_KEY, {})
    if not report_data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    comment = message.text.strip()
    if comment.lower() != "–Ω–µ—Ç":
        report_data['comment'] = comment
    await state.update_data({REPORT_DATA_KEY: report_data})
    await process_final_step(message, state)

# --- –§—É–Ω–∫—Ü–∏—è: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞) ---
async def process_final_step(message: Message, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —à–∞–≥–∏: –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–±–æ—Ä–∫–∏."""
    user_data = await state.get_data()
    report_data = user_data.get(REPORT_DATA_KEY, {})
    if not report_data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ –∫–∞–Ω–∞–ª ---
    channel_id = CLEANING_REPORTS_CHANNEL_ID
    if not channel_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç: –Ω–µ –∑–∞–¥–∞–Ω `CLEANING_REPORTS_CHANNEL_ID` –≤ `.env`.")
        await state.clear()
        logger.error("CLEANING_REPORTS_CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —É–±–æ—Ä–∫–µ.")
        return

    try:
        zone_name = report_data['zone_name']
        room_id_in_litepms = report_data.get('room_id_in_litepms')
        timestamp_str = report_data['timestamp']
        dt_obj = datetime.fromisoformat(timestamp_str)
        formatted_datetime = dt_obj.strftime('%d.%m.%Y %H:%M')

        caption_parts = [
            f"üßº <b>–û—Ç—á–µ—Ç –æ–± —É–±–æ—Ä–∫–µ</b>",
            f"<b>–ó–æ–Ω–∞:</b> {zone_name}",
            f"<b>ID –≤ LitePMS:</b> {room_id_in_litepms or '-'}",
            f"<b>–í—Ä–µ–º—è:</b> {formatted_datetime}",
            f"<b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {message.from_user.full_name} (ID: {message.from_user.id})"
        ]
        if report_data['comment']:
            caption_parts.append(f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {report_data['comment']}")

        caption = "\n".join(caption_parts)

        files_data: List[Dict[str, str]] = report_data.get('files', [])
        if not files_data:
             raise ValueError("–ù–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

        # --- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ ---
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_caption_message = await message.bot.send_message(
            chat_id=channel_id,
            text=caption,
            parse_mode=ParseMode.HTML
        )
        logger.info(f"–ü–æ–¥–ø–∏—Å—å –æ—Ç—á–µ—Ç–∞ –ø–æ —É–±–æ—Ä–∫–µ –∑–æ–Ω—ã '{zone_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª ({channel_id}), message_id: {sent_caption_message.message_id}")

        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        from aiogram.types import InputMediaPhoto, InputMediaVideo, InputMediaDocument
        media_group = []
        for file_info in files_data:
            fid = file_info['file_id']
            ftype = file_info['file_type']
            if ftype == 'photo':
                media_group.append(InputMediaPhoto(media=fid))
            elif ftype == 'video':
                media_group.append(InputMediaVideo(media=fid))
            else:
                media_group.append(InputMediaDocument(media=fid))
        
        if media_group:
            try:
                sent_media_group = await message.bot.send_media_group(
                    chat_id=channel_id,
                    media=media_group
                )
                logger.info(f"–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –∏–∑ {len(media_group)} —Ñ–∞–π–ª(–æ–≤) –æ—Ç—á–µ—Ç–∞ –ø–æ —É–±–æ—Ä–∫–µ –∑–æ–Ω—ã '{zone_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª ({channel_id}).")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–∞ –ø–æ —É–±–æ—Ä–∫–µ –∑–æ–Ω—ã '{zone_name}': {e}")
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–∞.")
        else:
            await message.answer("üì≠ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É.")

    except ValueError as ve:
        specific_error_msg = str(ve)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —É–±–æ—Ä–∫–µ –∑–æ–Ω—ã '{zone_name}': {specific_error_msg}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {specific_error_msg}")
        await state.clear()
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —É–±–æ—Ä–∫–µ –∑–æ–Ω—ã '{zone_name}' –≤ –∫–∞–Ω–∞–ª: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

    # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–±–æ—Ä–∫–∏ –≤ Lite PMS ---
    room_id_in_litepms = report_data.get('room_id_in_litepms')
    if room_id_in_litepms:
        try:
            result = await set_cleaning_status(room_id=room_id_in_litepms, status_id="0")
            if result is None:
                 logger.error(f"–§—É–Ω–∫—Ü–∏—è set_cleaning_status –≤–µ—Ä–Ω—É–ª–∞ None –¥–ª—è room_id={room_id_in_litepms}")
                 await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–±–æ—Ä–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API).")
            elif result.get("status") == "success":
                logger.info(f"–°—Ç–∞—Ç—É—Å —É–±–æ—Ä–∫–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞/–∑–æ–Ω—ã {room_id_in_litepms} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–ß–∏—Å—Ç—ã–π'.")
                # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–¥–º–∏–Ω, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å.
                # await message.answer("‚úÖ –°—Ç–∞—Ç—É—Å —É–±–æ—Ä–∫–∏ –∑–æ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–ß–∏—Å—Ç—ã–π'.")
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç API
                error_msg = result.get("data", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API.")
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–±–æ—Ä–∫–∏ –¥–ª—è {room_id_in_litepms}: {error_msg}")
                # await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–±–æ—Ä–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ: {error_msg}")
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–±–æ—Ä–∫–∏ –≤ Lite PMS –¥–ª—è {room_id_in_litepms}: {e}", exc_info=True)
            # await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–±–æ—Ä–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ: {e}")
    else:
        logger.info(f"–î–ª—è –∑–æ–Ω—ã '{report_data['zone_name']}' –Ω–µ —É–∫–∞–∑–∞–Ω ID –≤ LitePMS. –°—Ç–∞—Ç—É—Å —É–±–æ—Ä–∫–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è.")

    await state.clear()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(f"‚úÖ –û—Ç—á–µ—Ç –ø–æ —É–±–æ—Ä–∫–µ –∑–æ–Ω—ã **{report_data['zone_name']}** –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")