# bot/handlers/base.py
import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext

from bot.utils.permissions import get_user_role
#from bot.api.litepms import fetch_rooms
#from bot.cache import get_room_name

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("start"))  # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
async def cmd_start(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = message.from_user.id

    kb = ReplyKeyboardBuilder()

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    kb.button(text="üè® –ó–∞–µ–∑–¥—ã")        # -> –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å arrival
    kb.button(text="üíÜ‚Äç‚ôÄÔ∏è –°–ü–ê")          # -> /spa
    kb.button(text="üßº –û—Ç—á–µ—Ç –ø–æ —É–±–æ—Ä–∫–µ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω-–º–µ–Ω—é
    user_role = get_user_role(user_id)
    if user_role == "manager":
        kb.button(text="üõ† –ê–¥–º–∏–Ω")

    kb.adjust(2) # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    welcome_text = (
        "üè® –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –æ—Ç–µ–ª—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await message.answer(welcome_text, reply_markup=kb.as_markup(resize_keyboard=True))


# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º ---

@router.message(lambda message: message.text == "üè® –ó–∞–µ–∑–¥—ã")
async def cmd_arrival_redirect(message: types.Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é '–ó–∞–µ–∑–¥—ã'."""
    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ bookings.py
    try:
        from bot.handlers.bookings import cmd_arrival
        await cmd_arrival(message)
    except ImportError:
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await message.answer("/arrival")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–µ–∑–¥–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–µ–∑–¥–æ–≤.")


@router.message(lambda message: message.text == "üíÜ‚Äç‚ôÄÔ∏è –°–ü–ê")
async def cmd_spa_redirect(message: types.Message):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–æ–º–∞–Ω–¥—É /spa."""
    try:
        from bot.handlers.bookings import cmd_spa
        await cmd_spa(message)
    except ImportError:
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await message.answer("/spa")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ–Ω—é –°–ü–ê: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –°–ü–ê.")


# --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –û—Ç—á–µ—Ç –ø–æ —É–±–æ—Ä–∫–µ ---
@router.message(lambda message: message.text == "üßº –û—Ç—á–µ—Ç –ø–æ —É–±–æ—Ä–∫–µ")
async def start_cleaning_report_redirect(message: types.Message):  # <-- –£–±—Ä–∞–Ω state
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –º–æ–¥—É–ª—å –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —É–±–æ—Ä–∫–µ."""
    from bot.utils.permissions import can_access_command
    if not can_access_command(message.from_user.id, "/send_cleaning_report"):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —É–±–æ—Ä–∫–µ.")
        return

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø—Ä—è–º—É—é
        from bot.handlers.cleaning_report import cmd_start_cleaning_report
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –ù–ï –ø–µ—Ä–µ–¥–∞–≤–∞—è state
        await cmd_start_cleaning_report(message)  # <-- –ë–µ–∑ state
    except ImportError:
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await message.answer("/cleaning_report")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ–Ω—é –æ—Ç—á–µ—Ç–∞ –ø–æ —É–±–æ—Ä–∫–µ: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –æ—Ç—á–µ—Ç–∞ –ø–æ —É–±–æ—Ä–∫–µ.")


# --- –ê–¥–º–∏–Ω-–º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –¥–ª—è manager) ---

@router.message(lambda message: message.text == "üõ† –ê–¥–º–∏–Ω")
async def cmd_show_admin_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–º–µ–Ω—é —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É."""
    user_id = message.from_user.id
    user_role = get_user_role(user_id)

    if user_role != "manager":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (—Ä–æ–ª—å: {user_role}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")
        return

    kb = ReplyKeyboardBuilder()
    kb.button(text="/cash")
    kb.button(text="/task")
    kb.button(text="/dopy")
    kb.button(text="/ask")
    kb.button(text="/room")  # <-- /room –ø–µ—Ä–µ–º–µ—â–µ–Ω —Å—é–¥–∞
    kb.button(text="üîô –ù–∞–∑–∞–¥")
    kb.adjust(2)

    await message.answer(
        "üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )


# --- –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ---

@router.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def cmd_go_back(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await cmd_start(message)
