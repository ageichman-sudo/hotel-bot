from aiogram import Router, types
from aiogram.filters import Command
from datetime import date, datetime

from bot.api.litepms import get_cashbox_transactions, add_cashbox_transaction
from bot.utils.permissions import can_access_command  # ‚Üê –ù–û–í–û–ï: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤

router = Router()

# --- /dop ---
@router.message(Command("dop"))
async def cmd_dop(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not can_access_command(user_id, "/dop"):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        target_date = date.today()
    else:
        date_str = args[1].strip()
        try:
            target_date = datetime.strptime(date_str, "%Y.%m.%d").date()
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/dop 2025.09.26`",
                parse_mode="Markdown"
            )
            return

    date_iso = target_date.isoformat()
    transactions = await get_cashbox_transactions(date_iso, date_iso)

    TARGET_INCOME_ID = "9534"  # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ bot.config.DOP_INCOME_ID, –µ—Å–ª–∏ –µ—Å—Ç—å
    filtered = []
    for tx in transactions:
        try:
            price = float(tx.get("price", 0))
            income_id = str(tx.get("income", {}).get("id", ""))
            if price > 0 and income_id == TARGET_INCOME_ID:
                filtered.append(tx)
        except (ValueError, TypeError, AttributeError):
            continue

    if not filtered:
        await message.answer(f"–ù–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø–æ —Å—Ç–∞—Ç—å–µ ¬´–¥–æ–ø—ã¬ª –∑–∞ {target_date.strftime('%d.%m.%Y')}.")
        return

    lines = [f"üí∞ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—å–µ ¬´–¥–æ–ø—ã¬ª –∑–∞ {target_date.strftime('%d.%m.%Y')}:\n"]
    for tx in filtered:
        time_str = tx.get("date", "")[11:16]  # "14:30"
        amount = float(tx.get("price", 0))
        comment = tx.get("comment", "").strip() or "‚Äî"
        amount_fmt = f"{int(amount):,} ‚ÇΩ".replace(",", " ")
        lines.append(f"üïí {time_str} | {amount_fmt} | {comment}")

    full_text = "\n".join(lines)
    if len(full_text) > 4000:
        parts = [full_text[i:i+4000] for i in range(0, len(full_text), 4000)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(full_text)


# --- /cash ---
@router.message(Command("cash"))
async def cmd_cash(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not can_access_command(user_id, "/cash"):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    raw_text = message.text
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {raw_text}")

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏: /cash, —Ç–∏–ø, —Å—É–º–º–∞ –∏ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    args = message.text.split(maxsplit=2)
    print(f"[DEBUG] args –ø–æ—Å–ª–µ split(maxsplit=2): {args}")

    if len(args) < 3:
        print(f"[DEBUG] args < 3: len = {len(args)}")
        await message.answer(
            "üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
            "–§–æ—Ä–º–∞—Ç: `/cash [–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥] [—Å—É–º–º–∞] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/cash –¥–æ—Ö–æ–¥ 5000 \"–û–ø–ª–∞—Ç–∞ –°–ü–ê\"`",
            parse_mode="Markdown"
        )
        return

    op_type = args[1]
    rest = args[2]

    print(f"[DEBUG] op_type: {op_type}")
    print(f"[DEBUG] rest (—Å—É–º–º–∞ + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π): {rest}")

    # –†–∞–∑–±–∏–≤–∞–µ–º rest –Ω–∞ —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    parts = rest.split(maxsplit=1)
    print(f"[DEBUG] parts –ø–æ—Å–ª–µ split(maxsplit=1): {parts}")

    if len(parts) < 1:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞.")
        return

    amount_str = parts[0]
    comment = parts[1] if len(parts) > 1 else ""

    print(f"[DEBUG] amount_str: {amount_str}")
    print(f"[DEBUG] comment: {comment}")

    if op_type.lower() not in ("–¥–æ—Ö–æ–¥", "—Ä–∞—Å—Ö–æ–¥"):
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø: `–¥–æ—Ö–æ–¥` –∏–ª–∏ `—Ä–∞—Å—Ö–æ–¥`")
        return

    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        amount_str = amount_str.replace(",", ".")
        amount = float(amount_str)
        print(f"[DEBUG] amount: {amount}")
    except ValueError:
        print(f"[DEBUG] ValueError –ø—Ä–∏ float(amount_str)")
        await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000.50).")
        return

    # 0 ‚Äî –¥–æ—Ö–æ–¥, 1 ‚Äî —Ä–∞—Å—Ö–æ–¥
    type_id = 0 if op_type.lower() == "–¥–æ—Ö–æ–¥" else 1

    try:
        result = await add_cashbox_transaction(
            price=amount,
            type=type_id,
            comment=comment,
            # pay_type_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = 10874 (–Ω–∞–ª–∏—á–Ω—ã–µ), –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å
        )
        op_id = result.get("data", [{}])[0].get("operation_id", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        await message.answer(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID {op_id}, {amount} ‚ÇΩ, '{comment}'")
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: await –≤–Ω—É—Ç—Ä–∏ async def ---
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        from .base import cmd_admin_menu
        await cmd_admin_menu(message)
        # ------------------------------------------

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")      
