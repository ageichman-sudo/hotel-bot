from aiogram import Router, types
from aiogram.filters import Command
from bot.utils.voice import transcribe_voice, WHISPER_AVAILABLE
from bot.api.litepms import set_cleaning_status, fetch_rooms

router = Router()

ROOMS_CACHE = {}

@router.message(lambda message: message.voice is not None)  # ‚Üê –í–æ—Ç —Ç–∞–∫ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ
async def handle_voice_message(message: types.Message):
    
    if not WHISPER_AVAILABLE:
        await message.answer("üéô –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (Whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω).")
        return

    global ROOMS_CACHE
    if not ROOMS_CACHE:
        ROOMS_CACHE = await fetch_rooms()

    try:
        file = await message.bot.get_file(message.voice.file_id)
        file_bytes = await message.bot.download_file(file.file_path)
        audio_data = file_bytes.read()

        text = await transcribe_voice(audio_data)
        await message.reply(f"üéô –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: _{text}_", parse_mode="Markdown")

        if any(word in text.lower() for word in ["—É–±—Ä–∞–Ω", "–≥–æ—Ç–æ–≤", "—Å–¥–µ–ª–∞–Ω", "–ø–æ—á–∏—â–µ–Ω"]):
            found_room_id = None
            found_room_name = None
            for rid, rname in ROOMS_CACHE.items():
                if rname.lower() in text.lower():
                    found_room_id = rid
                    found_room_name = rname
                    break

            if found_room_id:
                await set_cleaning_status(found_room_id, "0")
                await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å —É–±–æ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω: {found_room_name} ‚Äî —á–∏—Å—Ç—ã–π")
            else:
                await message.answer("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä. –°–∫–∞–∂–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–î–æ–º 12 —É–±—Ä–∞–Ω¬ª")

    except Exception as e:
        import logging
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}", exc_info=True)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
