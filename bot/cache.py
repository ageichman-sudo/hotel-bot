# bot/cache.py
import asyncio
import logging
from collections import defaultdict
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

from bot.api.litepms import fetch_rooms  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ fetch_rooms –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict[str, str]

logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à ---
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {–∫–ª—é—á_–∫—ç—à–∞: {"data": –¥–∞–Ω–Ω—ã–µ, "timestamp": –≤—Ä–µ–º—è_–∑–∞–≥—Ä—É–∑–∫–∏}}
_cache: Dict[str, Dict[str, Any]] = {}
CACHE_LOCK = asyncio.Lock()

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) - 1 —á–∞—Å
DEFAULT_TTL = 3600

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º ---

async def _load_rooms_into_cache(ttl: int = DEFAULT_TTL):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –≤ –∫—ç—à."""
    try:
        rooms_dict = await fetch_rooms()
        if rooms_dict:
            _cache['rooms'] = {
                'data': rooms_dict,
                'timestamp': datetime.now(),
                'ttl': ttl
            }
            logger.info(f"‚úÖ –ö—ç—à –Ω–æ–º–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rooms_dict)} –∑–∞–ø–∏—Å–µ–π.")
        else:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–º–µ—Ä–æ–≤ –≤ –∫—ç—à: {e}", exc_info=True)
        # –ù–µ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å


async def initialize_cache():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—ç—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞...")
    await _load_rooms_into_cache()
    logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def refresh_cache():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ."""
    logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞...")
    await _load_rooms_into_cache()
    logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω.")


def get_cached_data(key: str) -> Optional[Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –ø–æ –∫–ª—é—á—É, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏.
    :param key: –ö–ª—é—á –∫—ç—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'rooms').
    :return: –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏.
    """
    cached_item = _cache.get(key)
    if not cached_item:
        return None

    data = cached_item.get('data')
    timestamp = cached_item.get('timestamp')
    ttl = cached_item.get('ttl', DEFAULT_TTL)

    if not data or not timestamp:
        return None

    if datetime.now() - timestamp > timedelta(seconds=ttl):
        logger.debug(f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ –ø–æ –∫–ª—é—á—É '{key}' —É—Å—Ç–∞—Ä–µ–ª–∏.")
        return None

    return data


def get_room_name(room_id: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ –µ–≥–æ ID –∏–∑ –∫—ç—à–∞.
    :param room_id: ID –Ω–æ–º–µ—Ä–∞ (—Å—Ç—Ä–æ–∫–∞, —Ç.–∫. –≤ API LitePMS —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞).
    :return: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "ID {room_id}".
    """
    rooms_dict = get_cached_data('rooms')
    if rooms_dict and isinstance(rooms_dict, dict):
        # room_name –≤ API –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ —Å–∞–º—É —Å—Ç—Ä–æ–∫—É
        room_name_raw = rooms_dict.get(str(room_id), f"ID {room_id}")
        if isinstance(room_name_raw, list) and room_name_raw:
            return room_name_raw[0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–º—è, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫
        elif isinstance(room_name_raw, str):
            return room_name_raw
        else:
            return f"ID {room_id}"
    return f"ID {room_id}"


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def periodic_cache_refresh(interval: int = DEFAULT_TTL):
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.
    :param interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
    """
    while True:
        await asyncio.sleep(interval)
        await refresh_cache()
