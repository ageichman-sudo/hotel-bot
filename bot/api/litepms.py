# bot/api/litepms.py
import aiohttp
import logging
from datetime import date, datetime
from typing import Dict, List, Union, Any, Optional

from bot.config import BASE_URL, LITEPMS_LOGIN, LITEPMS_API_KEY, SPA_ROOM_ID, DOPY_INCOME_ID

logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ---
_http_session: Optional[aiohttp.ClientSession] = None

async def get_session() -> aiohttp.ClientSession:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é aiohttp.ClientSession, —Å–æ–∑–¥–∞–≤–∞—è –µ—ë –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ."""
    global _http_session
    if _http_session is None or _http_session.closed:
        _http_session = aiohttp.ClientSession()
        logger.debug("üåê –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è aiohttp.ClientSession")
    return _http_session

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ ---
async def _request(method: str, params: dict = None, use_post: bool = False) -> dict:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET –∏–ª–∏ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Lite PMS API.
    """
    params = params or {}
    params.update({"login": LITEPMS_LOGIN, "hash": LITEPMS_API_KEY})

    session = await get_session()
    url = f"{BASE_URL}/{method}"

    try:
        if use_post:
            async with session.post(url, data=params) as resp:
                logger.debug(f"POST {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
                if resp.status != 200:
                    error_text = await resp.text()
                    logger.error(f"–û—à–∏–±–∫–∞ HTTP {resp.status} –ø—Ä–∏ POST {method}: {error_text}")
                    return {"status": "error", "data": error_text}
                data = await resp.json()
        else:
            async with session.get(url, params=params) as resp:
                logger.debug(f"GET {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
                if resp.status != 200:
                    error_text = await resp.text()
                    logger.error(f"–û—à–∏–±–∫–∞ HTTP {resp.status} –ø—Ä–∏ GET {method}: {error_text}")
                    return {"status": "error", "data": error_text}
                data = await resp.json()

        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        if not isinstance(data, dict):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç {method}: –æ–∂–∏–¥–∞–ª—Å—è dict, –ø–æ–ª—É—á–µ–Ω {type(data)}")
            return {"status": "error", "data": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"}

        # Lite PMS –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å "status" –∏–ª–∏ "success"
        if data.get("status") == "success" or data.get("success") == "true":
            return data
        else:
            error_msg = data.get("data", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API.")
            logger.warning(f"API {method} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_msg}")
            return {"status": "error", "data": error_msg}

    except aiohttp.ClientError as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ {method}: {e}")
        return {"status": "error", "data": f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}"}
    except Exception as e:
        logger.critical(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ _request({method}): {e}", exc_info=True)
        return {"status": "error", "data": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}"}

# --- Rooms ---
async def fetch_rooms() -> Dict[str, dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ Lite PMS —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    data = await _request("getRooms")
    if data.get("status") == "success":
        return {str(room["id"]): room for room in data["data"]}
    logger.error(f"–û—à–∏–±–∫–∞ fetch_rooms: {data}")
    return {}

# --- Categories ---
async def fetch_categories() -> Dict[str, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ Lite PMS."""
    data = await _request("getCategories")
    if data.get("status") == "success":
        return {str(cat["id"]): cat["name"] for cat in data["data"]}
    logger.error(f"–û—à–∏–±–∫–∞ fetch_categories: {data}")
    return {}

# --- Bookings ---
async def search_checkins(from_date: str, to_date: str) -> List[dict]:
    """–ò—â–µ—Ç –∑–∞–µ–∑–¥—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    data = await _request("searchBooking", {
        "from_date": from_date,
        "to_date": to_date,
        "type": "checkin"
    }, use_post=True)
    if data.get("status") == "success":
        return data.get("data", [])
    logger.error(f"–û—à–∏–±–∫–∞ search_checkins: {data}")
    return []

# --- Cashbox ---
async def get_cashbox_transactions(from_date: str, to_date: str) -> List[dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥."""
    data = await _request("getCashboxTransaction", {
        "from_date": from_date,
        "to_date": to_date,
    }, use_post=True)
    if data.get("status") == "success":
        return data.get("data", [])
    logger.error(f"–û—à–∏–±–∫–∞ get_cashbox_transactions: {data}")
    return []

async def add_cashbox_transaction(
    price: float,
    type: int,
    comment: str,
    income_id: str = None,
    expense_id: str = None,
    booking_id: int = None
) -> dict:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–∞—Å—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
    type: 0 ‚Äî –¥–æ—Ö–æ–¥, 1 ‚Äî —Ä–∞—Å—Ö–æ–¥
    """
    data = {
        "price": abs(price),
        "type": type,
        "comment": comment
    }
    if type == 0 and income_id:
        data["income_id"] = income_id
    elif type == 1 and expense_id:
        data["expense_id"] = expense_id
    if booking_id:
        data["booking_id"] = booking_id

    result = await _request("addCashboxTransaction", data, use_post=True)
    if result.get("success") != "true":
        error_msg = result.get("data", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API.")
        logger.error(f"–û—à–∏–±–∫–∞ add_cashbox_transaction: {error_msg}")
        raise RuntimeError(f"Lite PMS –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_msg}")
    return result

# --- Cleaning ---
async def set_cleaning_status(room_id: str, status_id: str = "0") -> dict:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É–±–æ—Ä–∫–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ —Å–ø–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞."""
    result = await _request("setRoomCleaningStatus", {
        "room_id": room_id,
        "status_id": status_id
    }, use_post=True)
    if result.get("success") != "true":
        error_msg = result.get("data", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API.")
        logger.error(f"–û—à–∏–±–∫–∞ set_cleaning_status –¥–ª—è room_id={room_id}: {error_msg}")
        raise RuntimeError(f"Lite PMS –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_msg}")
    return result

# --- Helpers ---
def format_guest_name(booking: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –≥–æ—Å—Ç—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    surname = str(booking.get("client_surname", "")).strip()
    name = str(booking.get("client_name", "")).strip()
    if surname and name:
        return f"{surname} {name[0]}."
    elif surname:
        return surname
    elif name:
        return name
    else:
        return "–ì–æ—Å—Ç—å –±–µ–∑ –∏–º–µ–Ω–∏"

def is_active_status(status_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã–º."""
    return status_id in ("2", "6", "8")

def get_room_name(room_id: str, rooms_cache: dict) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ –µ–≥–æ ID, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à."""
    room_data = rooms_cache.get(room_id, {})
    if isinstance(room_data, dict):
        return room_data.get("name", f"ID {room_id}")
    elif isinstance(room_data, str):
        return room_data
    else:
        return f"ID {room_id}"

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
async def fetch_rooms_by_categories(category_names: List[str]) -> Dict[str, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä–∞, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    all_categories = await fetch_categories()
    
    # –ù–∞—Ö–æ–¥–∏–º ID –Ω—É–∂–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    target_category_ids = [
        cat_id for cat_id, cat_name in all_categories.items()
        if cat_name in category_names
    ]
    
    if not target_category_ids:
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–º–µ–Ω–∞–º–∏: {category_names}")
        return {}

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ (–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    all_rooms = await fetch_rooms()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    filtered_rooms = {}
    for room_id, room_data in all_rooms.items():
        cat_id = str(room_data.get("cat_id", ""))
        if cat_id in target_category_ids:
            filtered_rooms[room_id] = room_data["name"]
    
    return filtered_rooms