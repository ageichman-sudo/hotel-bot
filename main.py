# main.py
import asyncio
import logging
from dotenv import load_dotenv
load_dotenv()

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
from bot.config import BOT_TOKEN
from bot.rag.search import init_rag 

# –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
from bot.handlers.base import router as base_router
from bot.handlers.bookings import router as bookings_router
from bot.handlers.finance import router as finance_router
from bot.handlers.tasks import router as tasks_router
from bot.handlers.voice import router as voice_router
from bot.handlers.cleaning_report import router as cleaning_report_router

# –ò–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
from bot.cache import initialize_cache, periodic_cache_refresh

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò
from bot.config import USE_LOCAL_AI
AI_ROUTER_AVAILABLE = False
if USE_LOCAL_AI:
    try:
        from bot.handlers.ai import router as ai_router
        AI_ROUTER_AVAILABLE = True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ai_router: {e}")
else:
    logging.info("‚ÑπÔ∏è –ò–ò –æ—Ç–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ .env (USE_LOCAL_AI=false)")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def main():
    if not BOT_TOKEN:
        logger.critical("‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞...")
    try:
        await initialize_cache()
        logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
    cache_refresh_task = asyncio.create_task(periodic_cache_refresh(3600))
    logger.info("üöÄ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∑–∞–ø—É—â–µ–Ω–∞.")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(base_router)
    dp.include_router(bookings_router)
    dp.include_router(finance_router)
    dp.include_router(tasks_router)
    dp.include_router(voice_router)
    dp.include_router(cleaning_report_router)
    
    if AI_ROUTER_AVAILABLE:
        dp.include_router(ai_router)
        logger.info("‚úÖ –†–æ—É—Ç–µ—Ä –ò–ò (/ask) –ø–æ–¥–∫–ª—é—á–µ–Ω.")
    else:
        logger.info("‚ÑπÔ∏è –†–æ—É—Ç–µ—Ä –ò–ò (/ask) –ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω.")

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")
    try:
        await dp.start_polling(bot)
    finally:
        # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        logger.info("üõë –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞...")
        cache_refresh_task.cancel()
        try:
            await cache_refresh_task
        except asyncio.CancelledError:
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        
 # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG
    try:
        await init_rag()
        logger.info("‚úÖ RAG –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}", exc_info=True)
